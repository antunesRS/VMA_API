@page "/InputFile"
@rendermode InteractiveWebAssembly
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@implements IAsyncDisposable
@inject HttpClient Http

<PageTitle>VMA</PageTitle>

<h3>Upload de Arquivo com Progresso via SignalR</h3>

<input type="file" @onchange="OnInputFileChange" />
<button @onclick="StartUpload" disabled="@isUploading">Upload</button>

<div>
    <progress max="100" value="@progressValue"></progress> <span>@progressValue%</span>
</div>

<hr>

@code {
    private HubConnection? hubConnection;
    private List<string> messages = [];
    private string? fileInput;
    private string? messageInput;
    private int progressValue;
    private string? fileName;
    private long? fileSize;
    private byte[]? fileData;
    private bool isUploading;

    // Método para carregar o arquivo selecionado
    private async Task OnInputFileChange(ChangeEventArgs e)
    {
        var file = ((Microsoft.AspNetCore.Components.Forms.IBrowserFile)e.Value);
        fileName = file.Name;
        fileSize = file.Size;

        var buffer = new byte[(int)fileSize];
        var stream = file.OpenReadStream(maxAllowedSize: 10_000_000); // Limite de 10MB
        await stream.ReadAsync(buffer, 0, (int)fileSize);
        fileData = buffer;

        progressValue = 0;
        isUploading = false;
    }

    // Método para iniciar o upload
    private async Task StartUpload()
    {
        if (fileData != null && fileData.Length > 0)
        {
            isUploading = true;

            var content = new MultipartFormDataContent();
            var fileContent = new ByteArrayContent(fileData);
            fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("application/octet-stream");
            content.Add(fileContent, "file", fileName);

            // Fazendo requisição POST para enviar a planilha
            var response = await Http.PostAsync("https://localhost:7118/api/importacao", content);
            if (response.IsSuccessStatusCode)
            {
                // Conectar ao SignalR para receber o progresso
                await ConnectToSignalR();
            }
            else
            {
                Console.WriteLine($"Erro no upload: {response.StatusCode}");
            }

            isUploading = false;
        }
    }

    private async Task ConnectToSignalR()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/hub"))
            .Build();

        hubConnection.On<int>("ReceiveProgress", (progress) =>
        {
            progressValue = progress;
            InvokeAsync(StateHasChanged);
        });

        try
        {
            await hubConnection.StartAsync();
            Console.WriteLine("Conectado ao SignalR");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao conectar ao SignalR: {ex.Message}");
        }
    }


    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
